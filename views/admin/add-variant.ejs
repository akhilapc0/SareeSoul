<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
  .form-floating label { color: #6c757d; }
  .form-control:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
  }
  .btn-group .btn { min-width: 120px; }
  .card { border: none; box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075); }
  .content-header { border-bottom: 1px solid #e3e6f0; padding-bottom: 1rem; margin-bottom: 1.5rem; }
  .text-danger { color: red; font-size: 14px; margin-top: 5px; }

  /* Custom CSS for modal and cropper */
  .img-thumb {
    width: 100px; height: 100px;
    object-fit: cover; border: 1px solid #ccc;
    border-radius: 5px; margin-right: 10px; position: relative;
  }
  .remove-btn {
    position: absolute; top: -5px; right: -5px;
    background: red; color: white; border: none;
    border-radius: 50%; width: 20px; height: 20px;
    cursor: pointer;
  }
  #cropperModal {
    display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.7); justify-content: center; align-items: center; z-index: 1000;
  }
  #cropperBox {
    background: white; padding: 20px; border-radius: 8px;
    max-width: 90%; max-height: 90%;
  }
  #cropperImage {
    max-width: 100%; height: auto;
  }
</style>

<body>
  <div class="screen-overlay"></div>
  <%- include('./partials/sidebar') %>
  <main class="main-wrap">
    <%- include('./partials/header') %>

    <section class="content-main">
      <div class="content-header">
        <div>
          <h2 class="content-title card-title">Add New Variant</h2>
          <p>Add a variant for <strong><%= product.name %></strong></p>
        </div>
        <div>
          <a href="/admin/products/<%= product._id %>/variants" class="btn btn-outline-secondary">
            <i class="material-icons md-arrow_back"></i> Back to Variants
          </a>
        </div>
      </div>

      <div class="card mb-4">
        <header class="card-header">
          <h4 class="card-title">Variant Information</h4>
          <small class="text-muted">Fill in the details below to create a new variant</small>
        </header>

        <div class="card-body">
          <form id="addVariantForm" enctype="multipart/form-data">
            <div class="row">
              <div class="col-lg-8">

                <!-- Colour -->
                <div class="mb-4">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="colour" name="colour" placeholder="Colour" />
                    <label for="colour">Colour</label>
                  </div>
                  <div id="colourError" class="text-danger"></div>
                </div>

                <!-- Stock -->
                <div class="mb-4">
                  <div class="form-floating">
                    <input type="number" class="form-control" id="stock" name="stock" placeholder="Stock" />
                    <label for="stock">Stock</label>
                  </div>
                  <div id="stockError" class="text-danger"></div>
                </div>

                <!-- Images -->
                <div class="mb-4">
                  <label for="images" class="form-label">Upload Images (Max 5)</label>
                  <input type="file" class="form-control" id="images" name="images" accept="image/*" multiple />
                  <div id="imagesError" class="text-danger"></div>

                  <!-- Preview -->
                  <div id="imagePreview" style="margin-top:10px; display:flex; gap:10px; flex-wrap:wrap;"></div>
                </div>
              </div>
            </div>

            <!-- Backend Error -->
            <div id="backendError" class="text-danger mb-3"></div>

            <hr class="my-4">
            <div class="d-flex justify-content-between align-items-center">
              <div class="btn-group">
                <button type="submit" id="submitBtn" class="btn btn-primary">
                  <i class="material-icons md-add"></i> Add Variant
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </section>
    <%- include('./partials/footer') %>
  </main>

  <!-- Cropper Modal -->
  <div id="cropperModal">
    <div id="cropperBox">
      <img id="cropperImage" />
      <div class="mt-3 text-end">
        <button class="btn btn-secondary me-2" onclick="closeCropper()">Cancel</button>
        <button class="btn btn-success" id="cropConfirm">Crop & Add</button>
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Cropper.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

  <!-- Main Script -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const imagesInput = document.getElementById("images");
      const previewDiv = document.getElementById("imagePreview");
      const form = document.getElementById("addVariantForm");
      const submitBtn = document.getElementById("submitBtn");
      const imagesError = document.getElementById("imagesError");

      let imageFiles = []; // Final storage
      let cropper;
      let fileQueue = []; // Temporary file storage for selected images
      const MAX_IMAGES = 5;

      // File input change
      imagesInput.addEventListener("change", () => {
        const newFiles = Array.from(imagesInput.files);
        const totalImages = imageFiles.length + newFiles.length;

        // Check if total images exceed the limit
        if (totalImages > MAX_IMAGES) {
          imagesError.textContent = `You can only upload up to ${MAX_IMAGES} images.`;
          imagesInput.value = ""; // Clear the input
          return;
        }

        imagesError.textContent = ""; // Clear any previous error
        fileQueue = newFiles; // Update fileQueue with new files
        if (fileQueue.length > 0) {
          startCropping();
        }
      });

      function startCropping() {
        if (fileQueue.length === 0) return; // Nothing left to crop

        const file = fileQueue.shift(); // Take first from queue
        const reader = new FileReader();

        reader.onload = (e) => {
          document.getElementById("cropperImage").src = e.target.result;
          document.getElementById("cropperModal").style.display = "flex";

          if (cropper) cropper.destroy();
          cropper = new Cropper(document.getElementById("cropperImage"), {
            aspectRatio: 1,
            viewMode: 1
          });
        };

        reader.readAsDataURL(file);
      }

      function closeCropper() {
        document.getElementById("cropperModal").style.display = "none";
        if (cropper) cropper.destroy();
        setTimeout(() => startCropping(), 300); // Move to next image
      }

      document.getElementById("cropConfirm").addEventListener("click", () => {
        // Check if adding a new image would exceed the limit
        if (imageFiles.length >= MAX_IMAGES) {
          document.getElementById("cropperModal").style.display = "none";
          imagesError.textContent = `You can only upload up to ${MAX_IMAGES} images.`;
          fileQueue = []; // Clear remaining files in queue
          return;
        }

        cropper.getCroppedCanvas({ width: 200, height: 200 }).toBlob((blob) => {
          const croppedFile = new File([blob], "cropped_" + Date.now() + ".jpg", { type: "image/jpeg" });
          imageFiles.push(croppedFile);

          renderPreviews();

          closeCropper();
        }, "image/jpeg");
      });

      function renderPreviews() {
        previewDiv.innerHTML = "";
        imageFiles.forEach((file, index) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const container = document.createElement("div");
            container.style.position = "relative";

            const img = document.createElement("img");
            img.src = e.target.result;
            img.className = "img-thumb";

            const removeBtn = document.createElement("button");
            removeBtn.className = "remove-btn";
            removeBtn.textContent = "×";
            removeBtn.onclick = () => {
              imageFiles.splice(index, 1);
              renderPreviews();
              imagesError.textContent = ""; // Clear error when an image is removed
            };

            container.appendChild(img);
            container.appendChild(removeBtn);
            previewDiv.appendChild(container);
          };
          reader.readAsDataURL(file);
        });
      }

      // Submit handler
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const colour = document.getElementById("colour").value.trim();
        const stock = document.getElementById("stock").value.trim();

        document.getElementById("colourError").textContent = "";
        document.getElementById("stockError").textContent = "";
        document.getElementById("imagesError").textContent = "";
        document.getElementById("backendError").textContent = "";

        let isValid = true;
        if (!colour) {
          document.getElementById("colourError").textContent = "Colour is required";
          isValid = false;
        }
        if (!stock || isNaN(stock) || stock < 0) {
          document.getElementById("stockError").textContent = "Stock must be ≥ 0";
          isValid = false;
        }
        if (imageFiles.length === 0) {
          document.getElementById("imagesError").textContent = "At least one image is required";
          isValid = false;
        }
        if (imageFiles.length > MAX_IMAGES) {
          document.getElementById("imagesError").textContent = `You can only upload up to ${MAX_IMAGES} images`;
          isValid = false;
        }
        if (!isValid) return;

        submitBtn.disabled = true;

        try {
          const formData = new FormData();
          formData.append("colour", colour);
          formData.append("stock", stock);
          imageFiles.forEach(file => formData.append("images", file));

          const res = await fetch("/admin/products/<%= product._id %>/variants/add", {
            method: "POST",
            body: formData
          });

          const data = await res.json();

          if (!res.ok) {
            document.getElementById("backendError").textContent = data.message || "Something went wrong";
            return;
          }

          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message || "Variant added successfully!",
            confirmButtonColor: "#3085d6"
          }).then(() => {
            form.reset();
            imageFiles = [];
            renderPreviews();
          });

        } catch (err) {
          document.getElementById("backendError").textContent = "Server error: " + err;
        } finally {
          submitBtn.disabled = false;
        }
      });
    });
  </script>
</body>
</html>